*제네릭2; 제네릭의 심화 문법

-제네릭 클래스와 상속
: 기본 클래스의 상속과 대부분 다를게 없음
>유의 1
: 어떤 참조형이 어떤 인스턴스를 참조할 수 있는가. 를 항상 유의할 것. (기본 클래스의 상속에서도 마찬가지)
: 기존 상속 관계의 특성과 똑같음.
: 작은 범위의 참조형이 본인과 큰 범위의 인스턴스를 참조할 수 있다.
>유의 2
: 타입 인자는 같아야지 상속 관계를 유지할 수 있음.

-타겟 타입
>정의
: 컴파일러가 유추하기 위한 정보, 혹은 근거를 타겟 타입이라고 함.

-와일드카드
>개요
: <T>에서 T가 다르면 제네릭 클래스든, 제네릭 메소드든 서로 어떤 상관 관계가 없음. (T가 Object라고 하더라도)
: 와일드카드 기반과 제네릭 기반은 기능적으로 큰 차이가 없음. 생긴것 또한 비슷함.
: 하지만 앞으로 자주 사용할 것은 와일드카드일 것임.
> <?>
: 얘가 와일드카드임.

-와일드카드의 상한과 하한의 제한: Bounded Wildcards
: 상속 관계의 클래스만 ?에 들어오도록 제한
: 최소 기준선과 최대 기준선으로 나뉨.
>Upper-Bounded Wildcards, 상한 제한된 와일드카드
: extends 를 사용. //<? extends UpperClass>
: 제네릭에서 상속 관계로 제한하던 것과 비슷함.
: extends 뒤에 오는 클래스, 즉 상속하려는 클래스의 하위 클래스여야함. (상한 제한의 의미)
: 최대 기준선을 정함.
// 예시. Box<?> extends Number
// : Number 이하의 클래스만 ?에 들어갈 수 있다.
>Lower-Bounded Wildcards, 하한 제한된 와일드카드
: super 를 사용. //<? super LowerClass>
: super 뒤에 오는 클래스보다 상위 클래스여야함. (하한 제한의 의미)
: 최소 기준선을 정함.
// 예시. Box<?> super Integer
// : Integer 이상의 클래스만 ?에 들어갈 수 있다.

-와일드카드 제한의 목적 (이해안감)
>상한 제한의 목적
: 넣는 것(set)을 막을 수 있음. (상속 관계에서의 참조, 인스턴스 관계)
: 꺼내는 것(get)만 가능.
: 상한 제한을 함으로써, 코드의 안정성을 상승시킬 수 있다. (컴파일러가 에러를 발생시킴)
>하한 제한의 목적
: 꺼내는 것(get)을 막을 수 있음. (상속 관계에서의 참조, 인스턴스 관계)
: 넣는 것(set)만 가능.
: 이 또한 안정성을 상승시킬 수 있음.

