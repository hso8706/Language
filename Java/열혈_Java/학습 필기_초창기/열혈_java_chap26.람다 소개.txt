코드를 줄이는 역사를 단계별로 이해
1. 인터페이스를 구현하는 근본적인 방법
2. 클래스 생성을 클래스 내부에서 진행하고, 객체 생성까지 동시에 해버리는 방법. (익명 클래스)
3. 인터페이스 참조형을 참조하면서 객체 생성 구문을 생략하는 방법(1-> 2-> 3->람다)
//중간 단계는 컴파일 안됨, 람다식이 완성되어야 컴파일됨.
4. 람다식에서의 단축 단계
>매개변수만 있는 람다식
-줄임 없는 표현
-중괄호 생략
: 문장이 하나인 경우에만 중괄호 생략 가능
-매개변수 형 생략
: 매개변수 형(타입)은 그냥 생략 가능
-매개변수 소괄호 생략
: 매개변수가 하나인 경우에만 소괄호 생략 가능
>반환값만 있는 람다식
-줄임 없는 표현
: 그냥 리턴문이 포함된 식을 작성하면됨.
-매개변수 형, 매개변수 소괄호는 동일하게 생략 가능
-중괄호 및 반환값 생략
: 기본적으로는 생략 불가
: 문장이 한 줄이고, 문장 실행 결과가 하나의 값만 남는 경우에는 생략 가능(자동으로 반환되었다고 판단하기 때문)
: return을 쓸 거면, 중괄호 생략 불가. return 생략하면 중괄호 생략 가능(근데 return없는게 일반적)
>매개변수와 반환값이 모두 있는 람다식
: 모든 생략법을 다 활용할 수 있음.
>매개변수가 없는 람다식
: 매개변수 소괄호를 꼭 사용하고 나머지는 다 동일하게 활용 가능.

람다식의 응용
: 기본적으로는 인스턴스 생성을 대신하는 곳에 사용되는듯?
1. 인터페이스 참조변수에 새로운 람다식의 생성(새로운 객체 참조값 할당)
2. 인자로 전달하는 람다식
3. 제네릭 기반의 함수형 인터페이스 람다식 구현
: 참조변수를 선언할 때 타입을 지정한다
: 즉, 람다식 구현에 크게 신경 쓸 필요 없다~

람다식
: 람다로 표현된 문장
: 추상 메서드, 딱 하나만 구성된 인터페이스만 람다식으로 구현할 수 있음.

함수형 인터페이스(기능적 인터페이스)
>의미
: 람다식이 참고할 수 있는 인터페이스
: 추상 메서드가 딱 하나인 인터페이스
: 추상 메서드가 하나만이면 다른 것이 있어도 함수형 인터페이스
: 다른 구현이 필요없는 메서드가 있으나 없으나 상관없는 이유 =>람다식은 결국 구현을 위한 식이기 때문. =>구현할 것만 구현하고 나머지 버림 
