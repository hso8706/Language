*Object 클래스
: Object 클래스의 메소드들을 위주로 설명하는 듯 함.
: 사실 Object 클래스만으로는 굳이 사용이 안되는 것이 많음. 이를 어떻게 오버라이딩해서 쓰느냐에 포커스를 맞출 것.

-finalize 메소드 (실무에서 잘 안씀...)
: 자바 가상머신에 의해서 가비지 컬렉션(GC) 될 때 자동으로 호출됨.
: 즉, 인스턴스가 사라질 때 생성되는 메소드
>finalize 메소드의 실행 과정
: 자바 가상머신은 우선 코드를 쫙 훑는다.
: 동시에 인스턴스가 삭제될  부분을 체크해둔다.
: 프로그램의 과정 중 여유로운 부분에서(?) finalize 메소드를 실행시켜 인스턴스를 삭제한다.
: 프로그램이 널널한 경우에는 체크와 동시에 삭제한다.
>프로그램의 종료
: 프로그램이 종료될 땐, 메소드 영역, 스택 영역, 힙 영역, 세 가지 모두 사라진다.
: 즉, 여유가 있는 상태로 프로그램이 종료된다면 가비지 컬렉션(GC)은 굳이 실행되지 않을 수 있다.
>System.gc( );
: GC, 가비지 컬렉션을 시스템에 요청하는 것.
: 근데 이 또한, 호출이 될 지 안될지는 불확실.
: 체크까지만 하고 삭제는 안 할 수도 있음.
>System.runFinalization( );
: 인스턴스 삭제까지 부탁하는 명령문.

-equals 메소드
>인스턴스의 비교
1. == 연산자
: ==연산자는 참조 값을 비교한다.
: 즉, 좌항과 우항이 참조하는 참조 값이 같은 지를 확인.
2. equals 메소드
: ==연산자랑 똑같음. 참조 값을 비교함.
: 내용이 아닌 참조 값을 비교하는 것임을 유의할 것.
: 내용은 같더라도 다른 인스턴스일 수 있다.
// equals 메소드 접근법
// : nameA.equals(nameB)
: equals 메소드를 응용하여 참조 값이 아닌, 내용을 토대로 두 메소드가 같다라는 기준을 잡을 수 있음.
>String 클래스의 equals 메소드
: String 클래스에서는 equals 메소드가 내용 비교를 하는 형태로 오버라이딩 되어있다.
: 따라서, ==를 통해서 참조 값을 비교하고, equals를 통해서 string의 내용을 비교할 수 있다.

-clone 메소드
: 인스턴스의 복사가 이뤄진다.
: 반환 값으로 복사된 인스턴스의 참조 값이 반환된다.
: 반환형이 Object로 되어있어 모든 인스턴스를 반환(복사)할 수 있다. 
// 반환형이 Object이므로 사용 시 형변환을 꼭 해줘야한다.
// 하지만 사실 요즘에는 발전해서 오버라이딩하면서 반환형을 바꿀 수 있다. 다만, 아무 반환형이 아닌 오버라이딩하고 있는 클래스로 반환형을 지정할 수 있음.
>clone 메소드의 사용 조건(전처리)
1. Cloneable 인터페이스 구현
: 추상 메소드가 없는 인터페이스(마커 인터페이스)인 Cloneable 인터페이스를 구현해서 clone 메소드를 사욯할 것임을 확인 해야함.
// 클래스에 implements Cloneable을 작성해줘야함.
2. clone 메소드를 오버라이딩하여 public으로 바꿔주어야함. 왜냐하면 clone 메소드는 원래 protected로 되어 있기 때문에 접근 범위를 넓혀 주어야 사용 가능하기 때문.
// public으로 바꿔주는 이유는 clone은 다른 패키지에 있기 때문
// 오버라이딩의 사용 방법 중 하나
// : 접근 범위를 넓혀 줄 수 있음(좁히는 것은 불가)

-Shallow Copy, clone 메소드의 연장선
: 얉은 복사라고도 함.
: 복사하려는 클래스가 다른 클래스를 참조할 때, 즉 생성자의 목적이 다른 클래스를 참조하는 변수를 생성하는 것일 때, 생기는 상황 중 하나
// 예, Rectangle 클래스는 Point 클래스를 참조하는 클래스이고, Point 클래스는 값을 받는 클래스일 때,
// : Rectangle을 clone 하면, Rectangle 전체를 복사하지만 내부의 Point는 복사하지 않음.
// : 따라서, 복사하려는 Rectangle의 Point가 참조하는 값을 따라서 복사한다. (Rectangle은 두 개가 되지만 Point가 참조하는 값은 그대로 하나이다.
>Deep Copy, 깊은 복사
: 깊은 복사, 즉 내부의 참조 값까지 복사할 수 있도록 하기위해서는 clone 메소드를 오버라이딩할 때, 접근 범위만 변경하는 것이 아닌 내부 값까지 복사하도록 내용을 추가하면 됨. 