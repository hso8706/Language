*클래스 변수와 클래스 메소드

-인스턴스 변수와 클래스 변수의 차이
>인스턴스 변수
: 인스턴스가 생성되었을 때, 생성된 인스턴스 안에 존재하는 변수
>클래스 변수
: 인스턴스 생성과 상관없이 존재하는 변수
: 모든 인스턴스가 공유할 수 있는 변수
: 어떠한 인스턴스 내에 속하지 않는 상태로 메모리 공간에 존재하는 변수
: 클래스 변수가 있는 클래스의 모든 인스턴스들은 해당 클래스에 대한 접근 권한을 갖는다.

-클래스 변수 선언 및 접근법
>클래스 변수 선언
: static classVariable_name;
// static과 함께 변수를 선언한다.
>클래스 내부 접근
: variabe_name; 
// 변수명 그대로 접근
>클래스 외부 접근
: instance_name . variable_name;
// 인스턴스를 생성 후, 생성된 인스턴스와 . 연산자를 통해 클래스 변수에 접근
: class_name . variable_name
// 인스턴스를 생성하지 않아도 클래스명과 . 연산자를 이용해 직접 변수에 접근할 수 있음.

-클래스 변수 초기화 시점과 방법
>초기화 시점
: 클래스가 가상머신에 읽히는 순간에 초기화가 진행됨.
: 따라서, 생성자를 통하지 않아도, 그리고 인스턴스를 생성하지 않아도 클래스 변수에 접근할 수 있음.
>초기화 방법
: 생성자에서 초기화하는 것이 아닌 생성자 이전에서, 클래스 생성 시 바로 변수 선언하는 것이 정상적.

-클래스 메소드
: 인스턴스 생성 이전부터 호출 가능하며, 어느 인스턴스에도 속하지 않고 메모리 공간에 저장된 메소드
: 클래스 변수와 의미는 같다.

-클래스 메소드 선언 및 접근법
>클래스 메소드 선언
: static classMethod_name;
>클래스 내부 접근
: method_name;
// 메소드명 그대로 접근
>클래스 외부 접근
: instance_name. method_name;
// 인스턴스를 생성 후, 생성된 인스턴스와 . 연산자를 통해 클래스 메소드에 접근
: class_name . method_name
// 인스턴스를 생성하지 않아도 클래스명과 . 연산자를 이용해 직접 메소드에 접근할 수 있음.

-클래스 변수와 메소드의 사용
: 굳이 인스턴스를 생성할 필요없이 클래스를 사용해도 되는 경우, static을 이용하여 사용.
>주의점
: 클래스 변수와 클래스 메소드는 인스턴스를 생성하기 전에 이미 메모리 공간에 존재하는 것들이기 때문에 혼합하여 사용할 수 없다.
: 즉, 클래스 메소드 내에서 인스턴스 변수 혹은 인스턴스 메소드가 존재하는 경우 오류가 발생한다. (인스턴스를 생성하지 않는 다면)

-static선언의 다른 용도
>static 초기화 블록
: static { ... }
// 위와 같은 형식으로 static으로 감싼 블록자체를 생성한다. 이는 클래스 로딩 시 단 한 번 실행되는 영역으로, 인스턴스와 관계없이 접근이 가능한 부분이다.
>static import 선언
: import static Java.lang.Math.*; (예시)
// 해설 좀 더 필요