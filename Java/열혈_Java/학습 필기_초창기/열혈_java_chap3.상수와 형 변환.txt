*상수와 형 변환

-상수
: 값이 변하지 않는 수
: 값이 한번 정해지면 변경이 불가능한 수
: 관례적으로 상수의 이름은 모두 대문자를 사용하고 문자간 사이는 언더바로 표시한다.

-상수 지정
>final
: 상수로 변환시키고 싶은 변수의 자료형 앞에 final을 붙인다.
: 값을 딱 한 번만 할당할 수 있다. (바로 초기화가 아니어도 상관없이)

-정수형 상수 표현
: 정수는 모두 int형으로 인식함.
: 2진수(0B-), 8진수(0-), 10진수( - ), 16진수(0x-) 모두 표현 가능하다.
: 숫자 사이에 언더바로 구획을 나누는 것도 허용.
: 하지만 println에선 10진수로 출력된다(?)
: byte, short는 연산에는 사용할 수 없지만 초기화는 가능하다.
: long의 경우 별도로 표현해야 인식한다. 숫자 끝에 l이나 L을 붙임.

-실수형 상수 표현
: long처럼 double과 float 또한 숫자 뒤에  d,D / f,F 를 붙여 어떤 자료형을 사용한 것인지 좀 더 명확하게 표현이 가능하다.
>숫자 0을 생략가능한 조건
0.5 == .5
5.0 == 5.
0.7f == .7f
7.0f == 7.f

-Escape sequeces
: 유니코드 문자 중 키보드로 입력하기 어려운 문자
\b : 백스페이스 문자
\t : 탭 문자
\n : 개 행 문자
\r : 캐리지 리턴 문자
\u : 원하는 특수문자를 사용하는 문자. 뒤에 특수문자의 유니코드를 입력한다.
\\, \', \" : \, ', "와 같은 표현을 출력하고 싶을 때 앞에 \를 붙인다.

-형 변환
: 연산은 같은 자료형끼리 이루어지기 때문에 연산 시 임시적으로 자료형을 변환하여 저장하는 것.

-자동 형 변환(Implicit Convesion)
: 규칙1. 자료형의 크기가 큰 방향으로 형 변환
: 규칙2. 자료형 크기에 상관없이 정수 자료형보다 실수 자료형이 우선한다.
>자동 형 변환의 근거
: 데이터 표현 범위가 넓은 쪽으로 변환될 시 데이터의 손실이 없기 때문, 오차는 있을지라도
>예시
// double num1 = 30;
// 30은 int 형 정수이지만 double형으로 자동 형 변환
// System.out.printlin(50L + 34.5);
// 50L은 long type, 34.5는 double type이므로, 50L이 double형으로 자동 형 변환이 이루어짐.

-명시적 형 변환(Explicit Conversion)
: 자동 형 변환이 이뤄지지 않는 조건에서 형 변환을 하는 것.
: 큰 범위에서 작은 범위로 형 변환을 이행할 때, 잘려나가는 바이트에 데이터가 저장되어 있으면 알 수 없는 값으로 변환됨을 주의하자.
: 명시적 형 변환을 필요로 하는 변수 앞에 괄호()로 감싼 자료형을 추가한다.