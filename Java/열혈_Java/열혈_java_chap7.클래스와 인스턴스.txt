*클래스와 인스턴스

-Class // Class = data(변수) + method
: 프로그램 = 데이터 + 기능(데이터 처리 및 조작)
: data, 변수의 선언을 통해 유지 및 관리
: method, 메소드 호출을 통해 데이터 처리 및 조작

>Class의 정의
: 연관된 데이터(변수)와 기능(메소드)를 묶는 도구
: 틀을 꾸려놓고 복사해서 사용하기 위해서 class로 묶는다.
: 이런 사본을 인스턴스(객체)라고 함.

>Class_name의 관례
: 변형 Camel Case model을 사용
: 첫 시작과 새로 시작하는 단어 모두 대문자

>Method_name, Variable_name 규칙
: 변형된 Camel Case model을 사용
: 첫 시작은 소문자, 새로 시작하는 단어는 대문자

>Constant_name(상수 이름)규칙
: 모두 대문자
: 둘 이상의 단어는 언더바( _ ) 사용

>Class의 인스턴스화(객체화)
: class라는 틀을 이용해 사용하는 방법.
: new라는 명령어를 사용.
: 인스턴스 변수, 클래스 내에 선언된 변수
// 멤버 변수, 필드(fields)라는 명칭으로도 사용됨.
: 인스턴스 메소드, 클래스 내의 정의된 메소드
: 인스턴스화
1. new class_name( );
// 위와 같은 문장으로 class를 인스턴스로 만듬(복제와 비슷)
// 키워드 new를 통해 인스턴스를 생성하면 생성된 주솟값이 반환됨.
2. class_name variable_name
// 인스턴스를 담아둘 변수를 생성해야한다. 이 변수를 참조 변수(Reference Variable)이라고 한다.
// 참조 변수는 변수이므로 참조하는 인스턴스를 변경할 수 있다.

>Class의 사용(인스턴스 접근법)
: referenceVaraible_name . instance_method( );
// . 연산자를 이용한다.
// 참조 변수와 인스턴스 내부 메소드를 작성하여 접근할 수 있다.

>참조변수의 매개변수 선언
: 참조변수를 매개변수로 선언하여 참조값(주소값)을 메소드에 전달할 수 있다.
// C언어의 구조체로의 포인터 전달이라고 생각하면 편함
: 접근법은 기존과 동일하고 참조값을 매개변수로 받은 메소드 내에서 접근하면 된다.

>참조변수 null 대입
ref = null;
: 이처럼 참조변수에 null을 대입하는 것은 참조하던 인스턴스와의 관계를 끊는다는 것을 의미한다.
: 참조변수에 null을 대입하면 참조를 끊음을 인식하고 가정문을 통해 확인하기 용이하다.

>인스턴스의 초기화
: 인스턴스화 시킬 class내에 해당 인스턴스를 구분할 데이터를 저장할 공간을 만든다.
: 즉, 각 인스턴스를 생성할 때 마다 인스턴트들을 구분하기 위한 공간이다. (인턴스의 고유 정보)
: 이는 곧 해당 인스턴스의 초기화를 시킬 메소드가 된다. 그렇기 때문에 해당 인스턴스 생성 시 반드시 한번 호출해야 한다.
: 자바에선 이를 생성자라는 문법으로 설정해놓음.

>인스턴스의 생성자
: 생성자란, 인스턴스를 구분할 수 있는 초기화 부분을 위한 메소드이다.
: 인스턴스의 초기화 부분을 생성자라고 하고 다른 구조를 사용.
: 생성자의 이름은 클래스 이름과 동일해야하고 반환형과 반환값이 없어야 한다.
: 생성자가 있기 때문에, 인스턴스 초기화를 위한 값을 인스턴스 매개변수로 보낼 수 있음.
: 인스턴스의 생성의 마지막 단계는 생성자 호출이고, 모든 인스턴스는 꼭 생성자를 갖추어야 한다.
: 생성자는 딱 한번 호출되어야한다. (인스턴스 생성 시, 자동으로 호출됨)
// 디폴트 생성자
생성자를 만들지 않은 인스턴스에 대해서 컴파일러가 자동으로 비어있는(empty) 생성자를 호출한다. 매개변수가 없어서 인자를 받지 않음.
