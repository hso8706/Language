*예외처리

-시스템 오류의 구분
: 시스템 오류에는 두 가지가 있다.
: 하나는 프로그래머에게 나타나는 오류이고, 다른 하나는 사용자의 실수로 생기는 오류이다.
>프로그래머 오류
: 컴파일 시 발견
>사용자 오류
: 프로그램 사용 시 발견(잘못된 사용)

-자바 예외처리의 기본
: 기본적으로 자바 예외처리는 사용자의 실수로 인한 예외를 다룬다.
: 사용자의 예외를 프로그래머가 처리해주는 부분의 내용을 다룬다.
: 만약에 ~~상황이 벌어졌을때! 를 대비한 모듈, 코드들이라고 생각.
: If~else if~else 문이 아닌 구분되는 코드를 사용해서 예외처리 부분임을 파악할 수 있게 했음. (가독성을 높이기 위해)
>catch
: 예외코드임을 따로 구분하기 위해서 만들어 놓은 것.

-자바의 예외처리 클래스
: 자바 가상 머신(JVM)이 예외상황을 알리기 위해 정의된 클래스
>java.lang.ArithmeticException
: 수학 연산에서의 오류 상황을 의미하는 예외 클래스
>java.util.InputMismatchException
: 클래스 Scanner를 통한 입력에서의 오류 상황을 의미하는 예외 클래스

- try~catch
>try 영역
: 어떤 부분에서 발생한 예외를 다루겠다고 표현한 영역(관찰 영역)
: 예외가 발생할 것으로 예상되는 부분을 try 몸체로 감쌈.
>catch 영역
: 어떤 종류의 예외를 다루고, 그 예외를 어떻게 처리할 것인지 작성하는 영역(처리 영역)
: try로 감싸진 부분 바로 다음에 catch를 작성
: catch의 매개 변수로는 예외 클래스의 인스턴스 참조 값으로 구성된다.

-자바가상머신의 예외처리 메커니즘 순서
1. 예외를 발견하고 해당 예외가 어떤 종류의 예외인지 파악한다.
2. 예외 종류에 따른 클래스의 인스턴스를 생성한다. (ArithmeticException, InputMismatchException)
3. 예외가 발생한 부분이 try에 감싸져 있는지 확인한다.
4. 예외 인스턴스의 참조값을 catch에 전달한다. catch의 매개변수는 예외 인스턴스의 참조값으로 되어있다.
5. 예외 인스턴스의 참조값을 전달 후, 자바가상머신의 예외처리 메커니즘 임무 완료임. 그 후 다시 코드를 순차적으로 읽는다.
// try~catch문이 없으면 오류가 발생하는 부분에서 프로그램이 종료된다.

-둘 이상의 예외 처리를 위한 구성
: catch의 수를 늘려서 둘 이상의 예외에 대비할 수 있다. catch문을 연이어서 작성하면 된다.
: catch문이 여러 개일 경우, 순차적으로 확인한다.
: 혹은 catch문의 매개 변수에 인스턴스형들을 ' | '로 구분하여 쓰면 된다.
예시. 
catch(ArithmeticException | InputMismatchException e) { ... }

-예외 발생 이후의 실행 흐름
: try내에서 예외가 발생된 지점 이후의 코드는 생략한다.
: try~catch문을 통째로 건너뛴 지점부터 실행된다.
: try~catch문은 입력 오류에 대한 예외의 관점에서 보았을 때 하나의 작업으로 보고 묶는 용도이다.

-Throwable 클래스
: java.lang.Throwable 클래스
: 모든 예외 클래스의 최상위 클래스
: Throwable도 Object를 상속한다. (당연히)

-Throwable 클래스의 메소드
>public String getMessage( )
: 예외의 원인을 담고 있는 문자열을 반환함.
>public void printStactTrace( )
: 예외가 발생한 위치와 호출된 메소드의 정보를 출력함. 

-예외의 전달
: try~catch문이 없을 경우, 예외 발생 지점에서 예외를 처리하지 않고 해당 메소드를 호출한 영역으로 예외가 전달됨.
: 즉, 돌고돌아 main 메소드로 전달되어 예외를 JVM이 처리하게 됨.
: JVM은 printStactTrace메소드를 호출하며 프로그램을 종료시킴.

-예외의 전달 응용
: try 부분을 줄이는데 응용할 수 있어보임.
: 메소드 간 정보를 전달하며 작동되는 구조이니, 시작 지점(예를 들면 main 메소드)에 try를 걸면 여러 메소드에 정보가 전달되는 과정 모두에서 예외를 확인할 수 있음.

-예외의 예시
>java.lang.ArrayIndexOutOfBoundsException
: 초기화된 배열의 Index 범위를 넘어 섰을때, 발생하는 예외
>java.lang.ClassCastException
: 부모(상위)클래스의 인스턴스를 자식(하위)클래스의 참조형으로 참조하려 할 때 발생하는 예외. 친절한 자바~
>java.lang.NullPointerException
: null을 가르키는 것을 대상으로 불가능한 작업을 할 때 발생하는 예외