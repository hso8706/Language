스트림의 배경
>스트림을 몰랐을 경우, 컬렉션에서 원하는 인스턴스를 사용하기 위한 작업 과정
1. 컬렉션 내부에 존재하는 인스턴스를 반복문을 통해 모두 꺼내서 확인한다.
2. 조건문을 통해 원하는 데이터(인스턴스)만 걸러내어 따로 뺀다.
3. 빼낸 데이터를 이용하여 작업을 한다.
// 내가 지금 당장 할 수 있는 작업
// 컬렉션을 이용하는 일반적인, 그리고 빈번한 작업

=>이같은 일련의 과정을 부드럽고 깔끔하게 하기 위해서 스트림이 만들어짐.

스트림; 인스턴스
: 여러 과정(작업)을 거치게 될 데이터 한 줄의 열을 의미함.
: 사실 인스턴스
과정(작업) 파이프; 메서드
: 스트림을 걸러내는 필터들.
: 사실 메서드

스트림 사용 방법
1. 컬렉션(저장소)의 인스턴스(스트림)을 생성해야함.
2. 작업 파이프(메서드)로 해당 인스턴스(스트림)을 보내야함.(메소드 호출)
=>내가 할 일. 스트림 생성법, 메소드 호출법을 익히면 된다!

스트림 코드 구성
1. 스트림
2. 중간 연산
: 최종 연산이 아닌 모든 연산
: 중간 연산끼리의 순서는 바꿀 수 있음(연산 결과가 달라질 수 있지만)
: 중간 연산은 없어도 될 수 있음.
3. 최종 연산
: 마지막 파이프
: 꼭 마지막에 등장해야함

스트림 코드 흐름
>학습용
1. 스트림 생성
: .stream() 메서드 사용하여 스트림 생성
: 참조변수로 생성한 스트림 참조
2. 중간 연산
: 생성한 스트림의 참조변수로 중간 연산 메서드 호출
: 중간 연산 결과를 참조하는 참조변수 생성
3. 최종 연산
: 중간 연산결과를 참조하는 참조변수로 최종 연산 메서드 호출
: 최종 연산 결과를 변수에 저장
: 결과로는 값, 혹은 현상이 있을 수 있음
>보편용
: 중간에 생성하는 참조변수를 모두 생략
: 최종 결과를 받는 변수만 만들고 스트림 생성부터 중간연산, 최종 연산의 메서드를 모두 ( . )연산자로 이어줌.
: 가독성을 위해서 메서드를 하나 호출할 때마다 개행해 줌.

스트림 구성의 디테일
>다양한 스트림 생성 방법
-Arrays.stream( )
: 배열을 대상으로 스트림 생성하는 방법.
: 인자로 배열 참조변수 제공
: 인자로 배열 참조변수, 시작 인덱스, 갯수를 제공할 수도 있음. (배열 일부를 스트림 생성)
-Collection<E>.stream()
: 컬렉션을 대상으로 스트림 생성하는 방법.
: java.util.Collection<E>에 디폴트 메소드로 존재하기 때문에 모든 컬렉션은 스트림화 할 수 있다.
//부분 스트림은 가능한지 모르겠음.
>다양한 중간 연산
-.filter()
: 조건식으로 스트림의 요소들을 걸러냄
-.mapToInt()
:
-.average()
: 스트림 요소들을 평균냄
>다양한 최종 연산
-.sum
: 중간 연산을 통과하고 남은 스트림을 합산함
-.forEach
: 스트림 요소를 하나씩 인자로 제공하는 메서드
-.getAsDouble()
: 중간 연산을 지난 요소를 double형으로 반환함
//느낌이 중간 연산, 최종 연산 메서드는 개발자가 취사 선택하는 것 같은데? 따로 구분된 게 아니라.(아님)
//아닌가 반환하는 값이 스트림이냐, 값 혹은 현상이냐에 따라 중간 연산자와 최종 연산자가 구분 되려나?(맞음)


스트림 공부법
1. 일반적으로 아는 문법으로 코드 작성
2. 스트림화 및 람다식화 시키기