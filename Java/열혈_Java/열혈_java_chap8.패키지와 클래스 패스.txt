*패키지와 클래스 패스

-개요
: 여러 개의 class를 하나의 파일( .java)에 넣을 수 있음.
: 이런 경우에 컴파일을 하면, 각각의 class에 해당하는 클래스 파일( .class)가 생성됨.
: 다양한 class 중 하나는 꼭 main 메소드를 포함하는 것이 있어야함.


-클래스 패스
: Java Virtual Machin이 클래스 파일을 찾는 경로
: 현재 디렉토리(폴더)에 .class파일이 모두 있으면 상관없지만 그렇지 않을 경우 실행시키면 오류 발생.
: 프로그래머가 패스를 따로 지정해줘야함

>클래스 패스의 지정
1. 지정법
set classpath=folder_path
// 이와같이 classpath를 따로 지정하여 해당 폴더(디렉토리)를 찾아 실행한다.
// 두 가지 이상의 path를 지정할 땐 세미콜론( ; )을 이용하고, 현재 디렉토리는 .으로 표기한다
// 예시
set classpath=.;C:\Users\하정호\Desktop\독학\Java_열혈\MyClass
// 이는 현재 디렉토리와 MyClass 디렉토리 둘 다 검색하게 하는 방법.
2. 절대 경로와 상대 경로
: 절대 경로 // 드라이브에서 현재 디렉토리까지의 경로
: 상대 경로 // 현재 디렉토리의 하위 경로
// 예시
set classpath=.;.\MyClass
// 이는 위의 예시와 완전 같은 표현임.

-패키지
: 클래스를 묶는 수단
: 클래스를 묶고 패키지로 표현함으로써 해당 패키지(클래스들)가 무슨 용도와 목적을 띄는지 표현하기 용이하고 찾기 좋다.
: 또한, 클래스명이 겹치는 경우에도 충돌을 방지할 수 있다!

>클래스명의 충돌
1. 공간에서의 충돌
: 같은 디렉토리에 같은 이름의 파일이 저장이 되질 않는다.
2. 접근 방법에서의 충돌
: 인스턴스 생성 방법에서 두 클래스에 차이가 없음.

>해결법
1. 공간에서의 충돌
: 경로를 다르게 해줌.
2. 접근 방법에서의 충돌
: 경로를 다르게 해줌으로써 접근 방법에도 차이가 생김. 

>패키지 선언 효과
1. 클래스 접근 방법이 구분됨.
// package_name.class_name
2. 클래스의 공간적인 구분이 생김.
// 클래스 파일이 저장되는 위치가 다름

>패키지 이름 관례
1. 패키지 이름은 모두 소문자로 구성(클래스명과 구분하기 위해서)
2. 인터넷 도메인 이름의 역순으로 구성
3. 패키지 이름 끝에는 클래스를 정의한 주체 혹은 팀을 구분하는 이름 추가
//예시. wxfx.com 도메인을 가진 회사의 smart팀
//패키지명: com.wxfx.smart

>패키지 선언(생성)
: class 소스파일 상단에 package 와 함께 선언
//예시: package com.wxfx.smart;

>패키지 컴파일
: JVM은 접근하려는 패키지의 가장 첫 경로를 찾음.
: cmd 를 통한 컴파일, -d 이용
// 현재 디렉토리>javac -d <directory> <file_name>
<directory>: 현재 디렉토리부터 패키지 파일이 있는 디렉토리를 의미
<file_name>: 패키지 파일의 이름
: 패키지 파일을 컴파일하면 마찬가지로 .class 파일이 생김
: .class파일의 디렉토리 경로는 패키지 명과 일치한다. (물리적 구분)

>패키지 클래스 접근
packageName . className varName = new packageName . className(argument)

>import 선언
: import란, 매번 package 패스를 쓰는 대신 쓰는 별칭을 만들어 사용하거나 혹은 생략하기 위한 것.
//예시1. import com.wxfx.smart.Circle;
//예시1: 앞으로 com.wxfx.smart라는 패키지에 존재하는 class인 Circle을 사용할 때, Class라고 쓰겠다.
//예시2: import com.wxfx.smart.*;
//예시2: 앞으로 com.wxfx.smart라는 패키지로 묶은 클래스는 패키지 선언을 생략한다.
//주의: 패키지 선언의 효과였던 접근 방법의 구분이 모호해져서 충돌의 우려가 있음. 사용 자제를 권고.


