*배열

-배열

>정의
: 같은 자료형을 지니면서 2개 이상의 나란한 메모리 공간을 지닌 것.

>1차원 배열
: 선형(1차원), 즉 한 방향으로 타입이 같은 둘 이상의 데이터를 저장할 수 있는 메모리 공간

>접근
type[ ] name = new type[n];
// n : 배열의 길이, 데이터 공간 갯수
// name : 배열의 이름, 사실 이름이 아닌 참조 변수이다. 배열의 참조 값을 저장함.
// type[ ] : 참조 변수 형 선언.
// new : 인스턴스 생성 명령어. 사실, n개의 type형 변수 혹은 메모리 공간들을 가진 하나의 인스턴스를 생성하는 것임.
// type[ ] name; name = new type[n];
// 위와 같이 참조 변수 선언과 인스턴스 생성을 분리해도 된다.

>활용
: 인스턴스이기 때문에 인스턴스 메소드 접근들이 가능함.
: 클래스의 배열도 생성할 수 있음. type형에 인스턴스 형이 올 수 있음.
: 클래스 배열의 길이는 배열 인스턴스에 존재하는 클래스 인스턴스의 수와 같음. (=n)
>활용2
: 배열을 사용할 땐, 배열의 인덱스를 나타낼 수 있는 변수를 생성하여 같이 붙여서 사용한다.
: 배열이 하나 입력될 때 증가, 배열이 하나 삭제될 때 감소

>참조 변수 선언 추가 내용
: type[ ] name;
// 배열 인스턴스 생성 전 미리 선언 가능
// 매개 변수로도 선언 가능(인자로 전달이 가능함), 배열과 포인터의 관계와 유사함.
// 반환형 정보로도 명시 가능. 즉, 배열 자료형(type[ ])을 메소드의 자료형으로 사용하여 반환값을 배열의 참조 값으로 반환할 수 있음.

-배열 초기화
1. type[ ] name = new type[ ] { ... };
// 초기화 값을 줄 때에는 n의 값을 넣어주면 안됨. 컴파일러가 알아서 계산하도록 약속되어있기 때문.
2. type[ ] name = { ... };
// 위의 문장의 축약 버전임. 아마도 우항(new ~)을 안써도 되는 것 같음.
>배열 초기화 추가 내용
type[ ] name;
name = new type[n];
: 기본 자료형 배열(type이 자료형)인 경우, 따로 초기화를 하지 않으면 모든 요소는 0으로 초기화됨.
: 인스턴스 배열(type이 인스턴스형)인 경우, 따로 초기화를 하지 않으면 모든 요소는 null으로 초기화됨.

-배열 초기화 메소드
>public static void fill(int[ ] a, int val)
: 두 번째 인자의 값으로 배열 초기화
: java.util 패키지의 Arrays 클래스에 존재
: 2번째 인자 부분에는 int 외에도 기본 자료형까지 메소드 오버로딩이 되어있음.
>public static void fill(int[ ] a, int fromIndex, int toIndex, int val)
: 2번째 인자로 전달된 값 부터 3번째 인자로 전달된 값 이전까지 4번째 인자로 전달된 값(val)로 배열 초기화

-배열 복사 메소드
>type[ ] arr2 = Arrays.copyOf ( arr1, arr1.length);