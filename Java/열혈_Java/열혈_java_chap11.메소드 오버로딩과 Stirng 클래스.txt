*메소드 오버로딩과 String 클래스

-메소드 오버로딩
>메소드 오버로딩
: 같은 클래스 내에서 같은 이름의 메소드를 갖는 것을 의미함.
: 같은 클래스 내에서 메소드 이름이 같으면 충돌이 일어남.
: 하지만 조건에 충족되는 경우, 같은 이름의 메소드를 가질 수 있음.
>조건
1. 매개변수의 수가 다를 경우
2. 매개변수의 형이 다를 경우
>오버로딩이 가능한 이유
: 호출한 메소드를 찾을 때, 메소드의 이름과 메소드의 매개변수 정보를 참조하기 때문
>애매한 경우
: 인자(argument)로 주어지는 값이 매개변수형과 다르고, 또한 자동 형 변환을 이용해서 인자로 주어지는 경우.
: 가장 데이터 형이 가까운 메소드에 적용되지만 애매한 경우는 피하는 것이 맞음.
>메소드 오버로딩을 사용하는 이유
: 같은 기능의 메소드를 사용하되, 받을 수 있는 매개변수의 다양성을 확장시키고 싶을 때 사용한다.
: 다양한 인자들을 받아 같은 기능을 할 수 있게 만든다.

-생성자 오버로딩
>생성자 오버로딩
: 같은 클래스 내에서 두 개 이상의 생성자가 존재하는 것을 의미.
: 생성 조건은 메소드 오버로딩과 같음.
>this 키워드
1. this를 이용한 다른 생성자의 호출
: 오버로딩 된 다른 생성자를 의미함.
: 결국 부족한 인자를 0취급(예시인가)해서 처음 정의된 생성자를 통해서 진행하는 형태를 취함.
2. this를 이용한 인스턴스 변수의 접근
: 인트턴스 변수의 접근에서 사용되는 this의 의미는 '이 문장이 속한 인스턴스'이다.
>조건
: 인스턴스 변수의 이름과 해당 인스턴스 메소드의 매개변수 명이 같을 경우
>사용법
: this.var_name = var_name;
: 여기서 var_name은 같은 명칭이지만, 하나는 인스턴스 변수명이고 하나는 인스턴스 메소드의 매개변수 명이다.

-String 클래스
>String 인스턴스의 특징
: Immutable, 즉 변경할 수 없다.
: 한 번 생성된 String 인스턴스에 저장된 값은 소멸하기 전까지 변경할 수 없다.
>인스턴스 생성 방법과 차이
1. String str = new String("Simple String");
: 기존 인스턴스 생성법과 같은 혛식으로, Simple String이라는 문자열이 저장된다.
// 매 번 새로운 인스턴스를 생성하는 방식이다.
2. String str = "Simple String";
: 더 보편적인 String의 인스턴스 생성 방법. 큰따옴표로 문자열을 감싸면 자동으로 String의 인스턴스가 생성된다.
// 여러개의 인스턴스를 생성하더라도 변수(str)만 달라질 뿐 같은 내용이 저장된 동일 인스턴스를 이용한다.

-String의 다양한 메소드
: 제일 중요한 것은 문서(Java Platform SE 8)를 스스로 찾아 필요한 메소드를 확인하는 것이다. 문법적인 것에서 능력차이가 나진 않는다. 문서에서 필요한 자료를 찾는 것에서 차이가 생긴다.

>문자열 길이 반환 메소드 (length)
선언 : public int length ( ) { ... }
접근 : String.length( );
의미 : String의 길이를 반환함.
>문자열 연결 메소드 (concat)
선언 : public String concat (String str) { ... }
접근 : String1.concat(String2);
의미 : String1에 String2를 이어붙임.
특징1:  컴파일러가 +를 자동으로 concat 메소드로 변환시킨다.
// += 연산도 가능하다.
// String1 + String2 == String1.concat(String2);
// +의 연산으로 문장을 붙일 때, String부분에 다른 자료형의 값은 valueOf 메소드를 통해 String으로 자동 변환된다.
특징2: 연속 호출이 가능하다.
// ex; String str = "AB".concat("CD").concat("EF");
// -> String str = "ABCEF"
// String str = ("AB".concat("CD")).concat("EF");
// 위와 같이 자동으로 괄호가 생겨 우선 순위대로 메소드를 호출하기 때문
>문자열 일부 추출 메소드 (substring)
선언 1 : public String substring (int beginIndex)
       2 : public String substring (int beginIndex, int endIndex)
접근 : String.substring(num); // String.substring(num1,num2);
의미 1: 기존 문자열을 문자열의 num에 해당하는 배열부터 끝 배열에 해당되는 문자열로 바꾼다.
       2: beginIndex부터 endIndex전까지의 문자열로 바꾼다. (endIndex 의 문자는 포함되지 않는다.)
>문자열 내용 비교 메소드 1 (equals)
선언 : public boolean equals (Object anObject)
접근 : String1.equals(String2);
// Object형으로 매개변수 선언이 되어있지만 String 인스턴스의 참조 값을 전달할 수 있음. (상속과 관련된 이유)
의미 : String1과 String2의 문자열을 비교하여 boolean값으로 반환한다.
>문자열 내용 비교 메소드 2 (compareTo)
선언 : public int compareTo (String anotherString)
접근 : String1.compareTo(String2);
의미 : String1과 String2의 문자열을 사전 편찬 순, 즉 유니코드 순으로 비교하여 대소 비교를 한다.
완전 일치하면 0 , String1이 앞서면 0보다 작은 값, String1이 뒤서면 0보다 큰 값이 반환된다.
>문자열 내용 비교 메소드 3 (compareToIgnoreCase)
선언 : public int compareToIgnoreCase (String str)
접근 : String1.compareTo(String2);
의미 : 대소문자를 상관하지않고 문자열을 비교한다.
>기본 자료형의 값을 문자열로 바꾸는 메소드
선언 : static String valueOf (dataType var)
접근 : String.valueOf(var_name); 
// 여기서 var_name은 데이터가 저장된 변수명이다.
의미 : double, char, int, boolean, float, long 등으로 저장된 값들을 문자열로 바꿔준다.

-StringBuilder 클래스
: 클래스 내부에 문자열을 저장할 수 있는 메모리 공간이 존재함.
: String 클래스와는 다르게 저장된 문자열을 추가 및 삭제와 같이 변경할 수 있음.
: 문자열을 보관하되 수정 기능을 갖추려면 StringBuilder 클래스를 이용하는 것이 옳음.
>선언
: public StringBuilder( )
: 16개의 문자를 저장할 수 있는 메모리 공간 확보
//public StringBuilder(64)
//64개의 문자를 저장할 수 있는 메모리 공간 확보
//public StringBuilder(int capacity)
//capacity개의 문자를 저장할 수 있는 메모리 공간 확보, (capacity가 담고 있는 수)
//public StringBuilder(String str)
//전달된 문자열 str과 16개의 문자를 저장할 수 있는 메모리 공간 확보

-StringBuilder의 대표 메소드
>public StringBuilder append (int i)
: 기본 자료형 데이터를 문자열 내용에 추가
: int외에도 모든 자료형에 대해서 오버로딩이 되어 있음
>public StringBuilder delete (int start, int end)
: 인덱스 start에서부터 end 이전까지의 내용을 삭제
>public StringBuilder insert (int offset, String str)
: 인덱스 offset의 위치에 str에 전달된 문자열 추가
>public StringBuilder replace (int start, int end, String str)
: 인덱스 start에서부터 end 이전까지의 내용을 str의 문자열로 대체
>public StringBuilder reverse ( )
: 저장된 문자열의 내용을 뒤집는다.
>public StringBuilder substring (int start, int end)
: 인덱스 start에서부터 end 이전까지의 내용만 담은 String 인스턴스의 생성 및 반환 (추출하는 기능)
>public StringBuilder toString ( )
: 저장된 문자열의 내용을 담은 String 인스턴스의 생성 및 반환
// 사실 왜 굳이 쓰는지 이유를 잘 모르겠음.

-StringBuilder의 메소드들의 반환값
: StringBuilder 메소드들의 반환값은 메소드를 호출한 인스턴스의 참조 값이다.
//예시. StirngBuilder stb2 = stb1.append(123);
//위 예시에서 우항이 반환하는 값은 stb1의 참조 값이고, 따라서 stb2와 stb1은 참조 값을 공유한다.
: 메소드를 호출할 때 새로운 인스턴스를 생성하는 것이 아님을 기억하자.

-toString 메소드 궁금증 해결
: toString 메소드는 StringBuilder에 보내진 데이터로 String 인스턴스를 생성하여 문자열로 만드는 것.
: 때문에 println 혹은 print을 통해 StringBuilder인스턴스를 문자열로 출력할 수 있음.
: 하지만 println 혹은 print에 StringBuilder 인스턴스 변수의 이름만 넣어도 문자열이 출력됨.
: StringBuilder 인스턴스 변수를 넣은것은 사실 참조 값, 즉, 주소값을 넣은 것이라  println 혹은 print을 하면 주소값이 출력되야 하는 것이 맞음.
: 하지만 println 혹은 print 자체가 참조값을 받으면 자동으로 toString 메소드를 호출하기 때문에 문자열이 생기는거임.
: 자바의 모든 클래스는 기본적으로 toString 메소드를 갖춘다. (내가 정의하든, 안하든, 이유: Object클래스와 상속 관계에 대한 설명)